2024/02/14 13:34:50 azd:{"type":"consoleMessage","timestamp":"2024-02-14T13:34:50.723998493-08:00","data":{"message":"\nInitializing an app to run on Azure (azd init)\n\n\n"}}
2024/02/14 13:34:50 azd:{"type":"prompt","timestamp":"2024-02-14T13:34:50.724204653-08:00","data":{"message":"How do you want to initialize your app?","kind":"single","default":"","options":["Use code in the current directory","Select a template"]}}
2024/02/14 13:34:51 client:Select a template
2024/02/14 13:34:51 azd:{"type":"prompt","timestamp":"2024-02-14T13:34:51.672343383-08:00","data":{"message":"Select a project template:","kind":"single","default":"","options":["Minimal","Event Driven Java Application with Azure Service Bus on Azure Spring Apps","Static React Web App with Java API and PostgreSQL","SAP CAP on Azure App Service Quickstart","SAP Cloud SDK on Azure App Service Quickstart (TypeScript)","Java Spring Apps with Azure OpenAI","WordPress with Azure Container Apps","Bicep template to bootstrap Azure Deployment Environments","Starter - Bicep","Starter - Terraform","Python (Django) Web App with PostgreSQL via Azure Container Apps","ChatGPT and Enterprise data with Azure OpenAI and Cognitive Search","ChatGPT + Enterprise Data with Azure OpenAI and Cognitive Search","Java - ChatGPT + Enterprise data with Azure OpenAI and Cognitive Search","ChatGPT and RAG with Azure OpenAI and Cognitive Search for JavaScript","Azure OpenAI Conference Session Recommender","Microservices App - Dapr Bindings Cron C# ACA PostgreSQL","Microservices App - Dapr Bindings Cron Node.js ACA PostgreSQL","Microservices App - Dapr Bindings Cron Python ACA PostgreSQL","ASP.NET Blazor chat application with Azure Cosmos DB for NoSQL, Azure Container Apps, and Azure OpenAI","Simple Chat Application using Azure OpenAI","Enterprise-Grade Reference Architecture for JavaScript","FastAPI on Azure Functions","Azure Functions - Text Summarization using AI Cognitive Language Service (C#-Isolated)","Azure Function with Event Hub with optional virtual network capabilities","Azure Functions - Chat using ChatGPT (Node.js JavaScript Function)","Azure Functions - LangChain with Azure OpenAI and ChatGPT (Python v2 Function)","Azure Functions - Chat using ChatGPT (Python v2 Function)","Azure Functions - Text Summarization using AI Cognitive Language Service (Python v2 Function)","SAP Cloud SDK on Azure Functions Quickstart (TypeScript)","Python (Django) Web App with PostgreSQL in VNet","Python (Flask) Web App with PostgreSQL in VNet","Azure OpenAI priority-based load balancer with Azure Container Apps","Azure API Management policy for priority-based routing to Azure OpenAI","ChatGPT Plugin using Python (FastAPI)","Microservices App - Dapr PubSub Java AKS","Microservices App - Dapr PubSub C# ACA ServiceBus","Microservices App - Dapr PubSub Node.js ACA ServiceBus","Microservices App - Dapr PubSub Python ACA ServiceBus","React Component Toolkit with ChatGPT and OpenAI ","Spring ChatGPT Application using Azure OpenAI on Azure Spring Apps","Spring PetClinic - Java Spring MySQL","Microservices App - Dapr Service Invoke C# ACA","Microservices App - Dapr Service Invoke Node.js ACA","Microservices App - Dapr Service Invoke Python ACA","React Web App with C# API and MongoDB","React Web App with C# API and SQL Database ","Static React Web App + Functions with C# API and SQL Database","React Web App with Java API and MongoDB ","Containerized React Web App with Java API and MongoDB","React Web App with Node.js API and MongoDB","Containerized React Web App with Node.js API and MongoDB","Kubernetes React Web App with Node.js API and MongoDB","Static React Web App + Functions with Node.js API and MongoDB","React Web App with Node.js API and MongoDB - Terraform","React Web App with Python API and MongoDB","Containerized React Web App with Python API and MongoDB","Static React Web App + Functions with Python API and MongoDB","React Web App with Python API and MongoDB - Terraform","Multi-repo ChatGPT and Enterprise data with Azure OpenAI and Cognitive Search","Setting up Azure OpenAI as a central capability within your organization","Reliable Web App Pattern for .NET","Next.js on Container Apps","Real time game leaderboard with Azure Container Apps and Redis Cache",".NET Redis OutputCache with Azure OpenAI",".NET eShop on Web App with Redis Cache","DotNet Function App with Service Bus","Blazor Web App with C# and SQL Database on Azure","Using FastAPI Framework with Azure Functions to serve paginated data from Snowflake","Simple Streamlit","Azure Kubernetes Service Store Demo","URL Shortener using Microsoft Orleans and Azure for hosting and data","Rock, Paper, Orleans (RPO) - Distributed .NET","Azure OpenAI with Azure Bot and Custom API calling, Behind a Firewall","Python (Flask) Web App with MySQL and Key Vault","Docusaurus with Azure Container Apps","Terraform template to bootstrap Azure Deployment Environments","Python (Django) Web App with PostgreSQL and Key Vault","FastAPI with API Management","Flask Chart API on ACA and CDN","Python (Flask) Web App with PostgreSQL","Flask Container with CDN","Flask Surveys Container App","FastAPI on Azure Container Apps","Flask API on Azure Container Apps","Static Maps API Function and CDN","React Web App with Azure API Management exposing SAP OData APIs","Azure API Management with Azure OpenAI","Service Bus messages processing to Dataverse","Containerized Apps on Azure Kubernetes Service","Jupyter Notebooks Web App on Azure Container Apps","Hello world Java Application on Azure Spring Apps","FastAPI, htmx, TailwindCSS on App Service","Scalable Django on Azure App Service","Simple Flask AZD"]}}
2024/02/14 13:34:53 client:Minimal
2024/02/14 13:34:53 azd:{"type":"consoleMessage","timestamp":"2024-02-14T13:34:53.696894037-08:00","data":{"message":"\n"}}
2024/02/14 13:34:53 azd:{"type":"consoleMessage","timestamp":"2024-02-14T13:34:53.698247694-08:00","data":{"message":"(✓) Done: Created a new azure.yaml file\n"}}
2024/02/14 13:34:53 azd:{"type":"consoleMessage","timestamp":"2024-02-14T13:34:53.708311602-08:00","data":{"message":"(✓) Done: Initialized git repository\n"}}
2024/02/14 13:34:53 azd:{"type":"prompt","timestamp":"2024-02-14T13:34:53.711355503-08:00","data":{"message":"Enter a new environment name:","kind":"text","default":"","options":null}}
2024/02/14 13:34:55 client:we
2024/02/14 13:34:55 azd:{"type":"consoleMessage","timestamp":"2024-02-14T13:34:55.035902484-08:00","data":{"message":"SUCCESS: New project initialized!. FOLLOW UP: You can view the template code in your directory: /tmp/azdclient4151302861\nLearn more about running 3rd party code on our DevHub: https://aka.ms/azd-third-party-code-notice\n"}}
2024/02/14 13:34:55 azd:{"type":"endMessage","timestamp":"2024-02-14T13:34:55.035951188-08:00","data":null}
2024/02/14 13:34:55 client:

