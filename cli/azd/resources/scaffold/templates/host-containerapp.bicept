{{define "host-containerapp.bicep" -}}
param name string
param location string = resourceGroup().location
param tags object = {}

param identityName string
param containerRegistryName string
param containerAppsEnvironmentName string
param applicationInsightsName string
{{- if .DbCosmosMongo}}
@secure()
param cosmosDbConnectionString string
{{- end}}
{{- if .DbPostgres}}
param databaseHost string
param databaseUser string
param databaseName string
@secure()
param databasePassword string
{{- end}}
{{- if .Frontend}}
param apiUrls array
{{- end}}
{{- if (and .Backend .Backend.Frontends)}}
param allowedOrigins array
{{- end}}
param exists bool

resource identity 'Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31' = {
  name: identityName
  location: location
}

resource applicationInsights 'Microsoft.Insights/components@2020-02-02' existing = {
  name: applicationInsightsName
}

module app '../core/host/container-app-upsert.bicep' = {
  name: '{{bicepName .Name}}-container-app'
  params: {
    name: name
    location: location
    tags: union(tags, { 'azd-service-name': '{{.Name}}' })
    identityType: 'UserAssigned'
    identityName: identity.name
    exists: exists
    containerAppsEnvironmentName: containerAppsEnvironmentName
    containerRegistryName: containerRegistryName
    containerCpuCoreCount: '1.0'
    containerMemory: '2.0Gi'
    {{- if ne .Port 0}}
    ingressEnabled: true
    external: true
    targetPort: {{.Port}}
    {{- if (and .Backend .Backend.Frontends)}}
    allowedOrigins: union(allowedOrigins, [
        // define additional allowed origins here
      ])
    {{- end}}
    {{- end}}
    secrets: [
      {{- if .DbCosmosMongo}}
      {
        name: 'azure-cosmos-connection-string'
        value: cosmosDbConnectionString
      }
      {{- end}}
      {{- if .DbPostgres}}
      {
        name: 'db-pass'
        value: databasePassword
      }
      {{- end}}
    ]
    env: [
      {
        name: 'APPLICATIONINSIGHTS_CONNECTION_STRING'
        value: applicationInsights.properties.ConnectionString
      }
      {{- if .DbCosmosMongo}}
      {
        name: 'AZURE_COSMOS_MONGODB_CONNECTION_STRING'
        secretRef: 'azure-cosmos-connection-string'
      }
      {{- end}}
      {{- if .DbPostgres}}
      {
        name: 'DB_HOST'
        value: databaseHost
      }
      {
        name: 'DB_USER'
        value: databaseUser
      }
      {
        name: 'DB_NAME'
        value: databaseName
      }
      {
        name: 'DB_PASS'
        secretRef: 'db-pass'
      }
      {
        name: 'DB_PORT'
        value: '5432'
      }
      {{- end}}
      {{- if .Frontend}}
      {{- range $i, $e := .Frontend.Backends}}
      {
        name: '{{upper .Name}}_BASE_URL'
        value: apiUrls[{{$i}}]
      }
      {{- end}}
      {{- end}}
      {{- if ne .Port 0}}
      {
        name: 'PORT'
        value: '{{ .Port }}'
      }
      {{- end}}
    ]
  }
}

output name string = app.outputs.name
output uri string = app.outputs.uri
{{ end}}
